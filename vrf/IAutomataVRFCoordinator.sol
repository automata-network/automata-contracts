//SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

interface IAutomataVRFCoordinator {

    /**
     * @notice this method is callable only by contracts that
     * extends the VRFConsumerBaseV2 contract
     *
     * @param numWords consumers specify the number of random words to be gemerated
     *
     * Other parameters are simply placeholders to keep the interface consistent
     * with Chainlink VRFCoordinatorV2.
     *
     * @dev rawFulfillRandomWords() callback is done at the end of this function.
     * This is because the off chain oracle actively publishes new randomness
     * within a defined period.
     *
     * @return roundId the current round id
     *
     */
    function requestRandomWords(bytes32, uint64, uint16, uint32, uint32 numWords) external returns (uint256 roundId);

    /**
     * @notice fetch the latest round of randomness generated by the oracle
     *
     */
    function getLatestRandomness() external view returns (uint256 randomness);

    /**
     * @notice this method can be called by any addresses to get a list of random words
     * generated from the latest round of randomness
     */
    function getLatestRandomWords(uint32 numWords) external view returns (uint256[] memory randomWords);

    function getCurrentRound() external view returns (uint256 roundId);

    function getRecentOracleSigAttestationHash() external view returns (bytes32);
}
